{"version":3,"sources":["assets/rocket.png","styles/globals.js","services/api.js","pages/Inscriptions/styles.js","pages/Inscriptions/index.js","index.js","App.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","api","axios","create","baseURL","FlexBox","styled","div","MainContainer","RegisterContainer","SelectSizes","Select","LeftSide","Rocket","img","RightSide","FormInternal","SpacedContainer","InputStyle","Input","Name","Email","CPF","SwitchContainer","Text","span","InlineSelect","Options","CheckBoxes","InputContainer","AlertText","CheckboxContainer","DialogContainer","DialogText","DialogInputContainer","AdviceContainer","DialogInput","ButtonsContainer","AlertMessageContainer","PayPalSection","section","wantInternship","wantMarathon","wantGameChampionship","readAdvice","shareLink","Inscriptions","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","AlertBox","withStyles","root","borderRadius","backgroundColor","position","display","top","right","bottom","left","Dialog","useState","openDialog","setOpenDialog","cpf","setCPF","responseMessage","setResponseMessage","responseButton","setResponseButton","showAlert","setShowAlert","showLoad","setShowLoad","success","setSuccess","alreadyRegistered","setAlreadyRegistered","showAlertBox","message","buttonMessage","selectPayPalValue","data","inscriptionType","document","getElementById","selected","a","get","email","response","registered","post","name","tShirtSize","minicourse1","undefined","miniCourse1","minicourse2","miniCourse2","github","linkedin","otherLink","others","id","onSubmit","src","rocket","className","type","onClick","options","title","onChange","e","replace","maskCpf","target","value","Switch","Checkbox","open","onClose","aria-labelledby","aria-describedby","maxWidth","form","submit","action","method","border","alt","width","height","ReactDOM","render"],"mappings":"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","file":"static/js/main.b3aaaa89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rocket.101fb40f.png\";","/**\r\n * @author Douglas Brandão\r\n * \r\n * Componente de estilização global do app.\r\n */\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  @import url('https://fonts.googleapis.com/css?family=Montserrat:200,300,400,500,700&display=swap');\r\n\r\n  * {\r\n    font-family: 'Montserrat', sans-serif;\r\n    -webkit-font-smoothing: antialiased\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n\r\n  html, body, #root {\r\n    height: 100%;\r\n  }  \r\n\r\n  @media screen and (max-width: 800px) {\r\n    html, body, #root {\r\n      width: 100vw;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","/**\r\n * @author Douglas Brandão.\r\n * \r\n * Componente de importação da API.\r\n */\r\nimport axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://us-central1-semac-inscriptions.cloudfunctions.net/httpServer\"\r\n});\r\n\r\nexport default api;\r\n","import styled from 'styled-components'\r\n\r\nimport {Input, Select} from '@rocketseat/unform'\r\n\r\nconst FlexBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  max-width: 100%;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 100%;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const MainContainer = styled(FlexBox)`\r\n  background-color: #151128;\r\n\r\n  button {\r\n    margin-top: 50px;\r\n    height: 54px;\r\n    width: 240px;\r\n    background-color: #E20272;\r\n    border: 0;\r\n    border-radius: 60px;\r\n    color:  #FFFF;\r\n    font-size: 16px;\r\n    font-weight: 400;\r\n    transition: 0.3s;\r\n\r\n    :hover {\r\n      background-color: #B8015D;\r\n      cursor: pointer;\r\n    }\r\n\r\n    :focus {\r\n      outline:0;\r\n    }\r\n  }\r\n\r\n  label {\r\n    margin: 0 0 2px 5px;\r\n    color: rgba(255, 255, 255, 0.5);  \r\n  }\r\n`;\r\n\r\nexport const RegisterContainer = styled(FlexBox)`\r\n  display: flex;\r\n  margin: 50px 0;\r\n  padding: 32px;\r\n  justify-content: space-between;\r\n  height: 1100px;\r\n  width: 1200px;\r\n  border-radius: 20px;\r\n  background-color: #1C1735;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    margin: 0;\r\n    padding: 16px;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    border-radius: 0;\r\n    height: 90%;\r\n    width: auto;\r\n  }\r\n`;\r\n\r\nexport const SelectSizes = styled(Select)`\r\n  width: 310px;\r\n  color: #FFFF;\r\n  font-weight: 400;\r\n  border: 0;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  font-size: 16px;  \r\n  height: 52px;\r\n  background-color: #151128;\r\n\r\n  :focus {\r\n    outline: none;\r\n    box-shadow: none;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    flex: 1;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const LeftSide = styled(FlexBox)`\r\n  flex-direction: column;\r\n  flex: 1;\r\n  margin-left: 50px;\r\n\r\n  h1 {\r\n    font-weight: 700;\r\n    color: #FFF;\r\n    margin: 15px;\r\n  }\r\n\r\n  p {\r\n    font-weight: 400;\r\n    text-align: center;\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n\r\n  span {\r\n    color: #E20272;\r\n  }\r\n\r\n  .already-registered {\r\n    font-weight: 400;\r\n    color: #fff;\r\n    text-align: center;\r\n  }\r\n\r\n  .already-registered button {\r\n    font-size: 14px;\r\n    margin: 16px;\r\n    padding: 8px 16px;\r\n    height: auto;\r\n    width: fit-content;\r\n    background: transparent;\r\n    border: 2px solid #E20272;\r\n    transition: .3s;\r\n  }\r\n\r\n  .already-registered button:hover {\r\n    background: #E20272;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 100%;\r\n    margin: 0;\r\n\r\n    h1 {\r\n      margin: 7px;\r\n    }\r\n\r\n    p {\r\n      max-width: 400px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Rocket = styled.img`\r\n  height: 200px;\r\n`;\r\n\r\nexport const RightSide = styled(FlexBox)`\r\n  flex-direction: column;\r\n  flex: 2;\r\n\r\n  h1 {\r\n    margin: 5px;\r\n    font-weight: \"bold\";\r\n    font-size: 22px;\r\n    color: #FFFF;\r\n  }\r\n\r\n  h3 {\r\n    font-weight: 200;\r\n    font-size: 16px;\r\n    color: #FFFF;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    flex: 1;\r\n    width: 95%;\r\n\r\n    h1 {\r\n      width: 100;\r\n      margin-top: 24px;\r\n      text-align: center;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FormInternal = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpacedContainer = styled(FlexBox)`\r\n  width: 665px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    padding: 0;\r\n    width: 100%;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst InputStyle = styled(Input)`\r\n  height: 54px;\r\n  padding-left: 10px;\r\n  border: 0;\r\n  border-radius: 8px;\r\n  color: #FFFF;\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  background-color: #151128;\r\n\r\n  :focus {\r\n    outline: none;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    flex: 1;\r\n    width: 97%;\r\n    margin: 0;\r\n    padding: 15px 0 15px 10px;\r\n  }\r\n`;\r\n\r\nexport const Name = styled(InputStyle)`\r\n  width: 650px;\r\n`;\r\n\r\nexport const Email = styled(InputStyle)`\r\n  width: 650px;\r\n`;\r\n\r\nexport const CPF = styled(InputStyle)`\r\n  width: 320px;\r\n`;\r\n\r\nexport const SwitchContainer = styled(FlexBox)`\r\n  width: 100%;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    flex-direction: row;\r\n    justify-content: flex-end;\r\n    align-items: start;\r\n    margin: 20px 0;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.span`\r\n  color: #FFF;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  color: rgba(255, 255, 255, 0.5);\r\n\r\n  @media screen and (max-width: 800px) {\r\n    max-width: 300px;\r\n  }\r\n\r\n`;\r\n\r\nexport const InlineSelect = styled(Select)`\r\n  width: 665px;\r\n  color: #FFFF;\r\n  font-weight: 400;\r\n  border: 0;\r\n  padding: 16px;\r\n  margin: 10px 0;\r\n  border-radius: 8px;\r\n  font-size: 16px;  \r\n  height: 52px;\r\n  background-color: #151128;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n\r\n  :focus {\r\n    outline: none;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    flex: 1;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const Options = styled(FlexBox)`\r\n  padding: 0 10px 0 10px;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const CheckBoxes = styled.div`\r\n`;\r\n\r\nexport const InputContainer = styled(FlexBox)`\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  margin: 10px 0;\r\n\r\n  label[class=\"required\"]::after {\r\n    content: \"*\";\r\n    margin-left: 4px;\r\n    color: #E20272;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 100%;\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nexport const AlertText = styled(FlexBox)`\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n  font-size: 14px;\r\n  margin: 40px 0 0 0;\r\n  width: 650px;\r\n  text-align: left;\r\n  color: rgba(255, 255, 255, 0.5);\r\n\r\n  .title {\r\n    margin-left: 10px;\r\n  }\r\n\r\n  span {\r\n    font-weight: 600;\r\n  }\r\n\r\n  p {\r\n    margin-left: 10px;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  div {\r\n    flex-direction: row;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const CheckboxContainer = styled(FlexBox)`\r\n  @media screen and (min-width: 801px) {\r\n    flex-direction: row;\r\n    p {\r\n      margin: 0;\r\n      max-width: 300px;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    justify-content: center;\r\n    align-items: start;\r\n    flex-direction: row;\r\n\r\n    p {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DialogContainer = styled(FlexBox)`\r\n  height: 600px;\r\n  width: 900px;\r\n  padding: 16px;\r\n  background-color: #1C1735;\r\n  flex-direction: column;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    height: 100%;\r\n    width: auto;\r\n  }\r\n\r\n`;\r\n\r\nexport const DialogText = styled(FlexBox)`\r\n  width: 500px;\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n  margin-bottom: 25px;\r\n\r\n  p {\r\n    color: rgba(255, 255, 255, 0.5);\r\n    font-size: 16px;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    max-width: 350px;\r\n    justify-content: center;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const DialogInputContainer = styled(FlexBox)`\r\n  border-radius: 20px;\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n  margin: 10px 0;\r\n\r\n  label {\r\n    margin: 0 0 5px 10px;\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n\r\n  label[class=\"required\"]::after {\r\n    content: \"*\";\r\n    margin-left: 4px;\r\n    color: #E20272;\r\n  }\r\n\r\n  input {\r\n    height: 54px;\r\n    width: 500px;\r\n    padding-left: 10px;\r\n    border: 0;\r\n    border-radius: 8px;\r\n    color: #FFFF;\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    background-color: #151128;\r\n  }\r\n\r\n  input:focus {\r\n    outline: none;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    input {\r\n      flex: 1;\r\n      width: 97%;\r\n      margin: 0;\r\n      padding: 15px 0 15px 10px;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const AdviceContainer = styled.div`\r\n  width: 500px;\r\n  margin: 15px 0;\r\n\r\n  p {\r\n    margin: 5px 0;\r\n    font-size: 14px;\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 100%;\r\n    max-width: 300px;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport const DialogInput = styled(InputStyle)`\r\n  padding-left: 10px;\r\n  width: 500px;\r\n`;\r\n\r\nexport const ButtonsContainer = styled(FlexBox)`\r\n  button {\r\n    margin: 50px 10px 0 10px;\r\n    height: 32px;\r\n    width: 120px;\r\n    background-color: #E20272;\r\n    border: 0;\r\n    border-radius: 60px;\r\n    color:  #FFFF;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    transition: 0.3s;\r\n\r\n      :hover {\r\n        background-color: #B8015D;\r\n        cursor: pointer;\r\n      }\r\n\r\n      :focus {\r\n        outline:0;\r\n      }\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    display: flex;\r\n    flex-direction: row;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nexport const AlertMessageContainer = styled(FlexBox)`\r\n  flex-direction: column;\r\n  padding: 16px 24px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 500px;\r\n  height: 150px;\r\n  background-color: #151128;\r\n\r\n  h1 {\r\n    font-size: 16px;\r\n    color: #FFF;\r\n    text-align: center;\r\n  }\r\n\r\n  button {\r\n    margin: 50px 10px 0 10px;\r\n    padding: 8px 12px;\r\n    height: 32px;\r\n    width: auto;\r\n    min-width: 100px;\r\n    background-color: #E20272;\r\n    border: 0;\r\n    border-radius: 60px;\r\n    color:  #FFFF;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    transition: 0.3s;\r\n\r\n      :hover {\r\n        background-color: #B8015D;\r\n        cursor: pointer;\r\n      }\r\n\r\n      :focus {\r\n        outline:0;\r\n      }\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 90%;\r\n    overflow: hidden;\r\n\r\n    h1 {\r\n      width: auto;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PayPalSection = styled.section`\r\n  display: none;\r\n`;\r\n","/**\r\n * @author Douglas Brandão\r\n * \r\n * Componente de visualização da tela de inscrição.\r\n */\r\nimport React, { Fragment, useState } from 'react'\r\n\r\nimport api from '../../services/api'\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { withStyles, useTheme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nimport { Form } from '@rocketseat/unform'\r\n\r\nimport {\r\n  MainContainer,\r\n  RegisterContainer,\r\n  InputContainer,\r\n  LeftSide,\r\n  Rocket,\r\n  RightSide,\r\n  FormInternal,\r\n  SpacedContainer,\r\n  Name,\r\n  Email,\r\n  SelectSizes,\r\n  CheckBoxes,\r\n  CPF,\r\n  SwitchContainer,\r\n  Text,\r\n  Options,\r\n  InlineSelect,\r\n  CheckboxContainer,\r\n  AlertText,\r\n  DialogContainer,\r\n  DialogInputContainer,\r\n  DialogInput,\r\n  AdviceContainer,\r\n  DialogText,\r\n  ButtonsContainer,\r\n  AlertMessageContainer,\r\n  PayPalSection,\r\n} from './styles' \r\n\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport rocket from '../../assets/rocket.png'\r\n\r\n/* Variáveis booleanas que o usuário poderá manipular. */\r\nlet wantInternship = false;\r\nlet wantMarathon = false;\r\nlet wantGameChampionship = false;\r\nlet readAdvice = false;\r\nlet shareLink = false;\r\n\r\nexport default function Inscriptions() {\r\n\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  /**\r\n   * Caixa de alerta dinâmica.\r\n   */\r\n  const AlertBox = withStyles({\r\n    root: {\r\n      '& .MuiDialog-paper': {\r\n        borderRadius: 20,\r\n        backgroundColor: \"transparent\"\r\n      },\r\n      '& .MuiDialog-paperScrollPaper': {\r\n        borderRadius: 20,\r\n      },\r\n      '& .MuiPaper-rounded': {\r\n        borderRadius: 20,\r\n      },\r\n      '& .MuiDialog-paperWidthSm': {\r\n        borderRadius: 20,\r\n      },\r\n      '& .MuiDialog-paperFullScreen': {\r\n        position: 'absolute',\r\n        display: 'block',\r\n        borderRadius: 0,\r\n        top: '0',\r\n        right: '0',\r\n        bottom: '0',\r\n        left: '0'\r\n      }\r\n    },\r\n  })(Dialog);\r\n\r\n  const optionsSizes = [\r\n    {id: \"PP\", title: \"PP\" },\r\n    {id: \"P\", title: \"P\"},\r\n    {id: \"M\", title: \"M\"},\r\n    {id: \"G\", title: \"G\"},\r\n    {id: \"GG\", title: \"GG\"},\r\n    {id: \"Extra GG\", title: \"Extra GG\"}\r\n  ]\r\n  \r\n  const optionsMiniCourse1 = [\r\n    {id: 0, title: \"Nenhuma das opções\"},\r\n    {id: 1, title: \"Desenvolvimento de APIs Utilizando SpringBoot - Luiz Roberto Freitas\"},\r\n    {id: 2, title: \"Análise de Sinais de Áudio Musical - Thiago Fernandes Tavares\"}\r\n  ]\r\n\r\n  const optionsMiniCourse2 = [\r\n    {id: 0, title: \"Nenhuma das opções\"},\r\n    {id: 3, title: \"Introdução ao Processamento de Linguagem Natural com Python - Henrique Dezani\"},\r\n    {id: 4, title: \"Cronograma de Projetos: Cálculo do tempo de um projeto utilizando os diagramas CPM, Rede, AoA e \" + \r\n      \"AoN - Luiz Afonso Peccini\"}\r\n  ]\r\n\r\n  const typeInscriptionsOptions = [\r\n    {id: \"Aluno de graduação ou técnico de TI\", title: \"Aluno de graduação ou técnico de TI - R$80,00\"},\r\n    {id: \"Professor/Servidor da UNESP\", title: \"Professor/Servidor da UNESP - R$90,00\"},\r\n    {id: \"Demais\", title: \"Demais - R$100,00\"},\r\n  ]\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [cpf, setCPF] = useState(\"\");\r\n  const [responseMessage, setResponseMessage] = useState(\"\");\r\n  const [responseButton, setResponseButton] = useState(\"\");\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [showLoad, setShowLoad] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [alreadyRegistered, setAlreadyRegistered] = useState(false);\r\n\r\n  /**\r\n   * Aplica a máscara do campo de CPF.\r\n   * \r\n   * @param {String} cpf : texto que será mascarado.\r\n   * @returns CPF no formato XXX.XXX.XXX-XX.\r\n   */\r\n  function maskCpf(cpf) {\r\n    return cpf\r\n      /* Substitui qualquer caractere que não seja número por nada. */\r\n      .replace(/\\D/g, '')\r\n      /* Captura 2 grupos de números: o primeiro de 3 e o segundo de 1. Após capturar o primeiro grupo ele adiciona um\r\n       ponto antes do segundo grupo de números. */\r\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n      .replace(/(\\d{3})(\\d)/, '$1.$2')\r\n      .replace(/(\\d{3})(\\d{1,2})/, '$1-$2')\r\n      /* Captura 2 números seguidos de um traço e não deixa ser digitado mais nada. */\r\n      .replace(/(-\\d{2})\\d+?$/, '$1')\r\n  }\r\n\r\n  /**\r\n   * Define a ação do botão do AlertBox quando clicado. Caso a inscrição tenha sido efetuada com sucesso, o usuário, ao\r\n   * clicar no botão em questão, será redirecionado para a tela de pagamento do PayPal.\r\n   */\r\n  function handleAlertButtonClick() {\r\n    if (success) {\r\n      document.getElementById('paypal-form').submit();\r\n    } else {\r\n      setShowAlert(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exibe a mensagem de alerta personalizada ao usuário.\r\n   * \r\n   * @param {String} message : mensagem que será exibida. \r\n   * @param {String} buttonMessage : texto do botão de confirmação.\r\n   */\r\n  function showAlertBox(message, buttonMessage) {\r\n    setResponseMessage(message);\r\n    setResponseButton(buttonMessage);\r\n    setShowAlert(true);\r\n  }\r\n\r\n  /**\r\n   * Seleciona, no select do formulário de redirecionamento do PayPal, o tipo de inscrição do usuário.\r\n   * \r\n   * @param {Object} data : dados retornados do formulário.\r\n   */\r\n  function selectPayPalValue(data) {\r\n    if (data.inscriptionType === \"Aluno de graduação ou técnico de TI\") {\r\n      document.getElementById('opt-ti-student').selected = true;\r\n    } else if (data.inscriptionType === \"Professor/Servidor da UNESP\") {\r\n      document.getElementById('opt-professors-servers').selected = true;\r\n    } else {\r\n      document.getElementById('opt-others').selected = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pesquisa a inscrição do usuário pelo seu e-mail. A API retornará, além da confirmação da inscrição, o tipo da mes-\r\n   * ma para que o link de redirecionamente do PayPal possa ser submetido.\r\n   * \r\n   * @param {Object} data : formulário de pesquisa (conterá apenas o e-mail digitado). \r\n   */\r\n  async function handleSearch(data) {\r\n    setAlreadyRegistered(false);\r\n\r\n    /* Exibe o alerta de carregamento. */\r\n    setResponseMessage(\"Aguarde, estamos processando sua solicitação...\")\r\n    setShowLoad(true);\r\n\r\n    const response = await api.get(`/inscription/${data.email}`);\r\n\r\n    setShowLoad(false);\r\n\r\n    let buttonMessage = \"Voltar\";\r\n    if (response.data.registered) {\r\n      buttonMessage = \"Efetuar pagamento\";\r\n      setSuccess(true);\r\n      selectPayPalValue(response.data);\r\n    }\r\n\r\n    showAlertBox(\r\n      response.data.registered ? \"Encontramos sua inscrição! Clique no botão abaixo para efetuar o pagamento.\" : \r\n        \"Infelizmente, não conseguimos encontrar nenhuma inscrição com esse e-mail.\", \r\n      buttonMessage, \r\n      success);\r\n  }\r\n\r\n  /**\r\n   * Cuida da lógica responsável pelo evento de submit do formulário de cadastro.\r\n   * \r\n   * @param {Object} data : dados retornados do formulário. \r\n   */\r\n  async function handleSubmit(data) {\r\n    /* Se o dialog de informações extras (GitHub, LinkedIn...) não está aberto e o usuário quer emprego ou vaga de está-\r\n    gio, o dialog em questão deve então ser aberto. */\r\n    let buttonMessage = \"Voltar\";\r\n\r\n    if (readAdvice) {\r\n      if (!openDialog && wantInternship) {\r\n        setOpenDialog(true);\r\n      } else {\r\n        setOpenDialog(false);\r\n\r\n        /* Exibe o alerta de carregamento. */\r\n        setResponseMessage(\"Aguarde, estamos processando sua solicitação...\")\r\n        setShowLoad(true);\r\n\r\n        /* Envia o formulário a API apenas se o usuário selecionou o checkbox de aviso obrigatório. */\r\n        const response = await api.post(\"/inscription\", {\r\n          name: data.name,\r\n          email: data.email,\r\n          cpf: data.cpf,\r\n          inscriptionType: data.inscriptionType,\r\n          tShirtSize: data.tShirtSize,\r\n          wantInternship: wantInternship,\r\n          wantMarathon: wantMarathon,\r\n          wantGameChampionship: wantGameChampionship,\r\n          shareLink: shareLink,\r\n          minicourse1: data.miniCourse1 !== undefined ? data.miniCourse1 : \"\",\r\n          minicourse2: data.miniCourse2 !== undefined ? data.miniCourse2 : \"\",\r\n          github: data.github !== undefined ? data.github : \"\",\r\n          linkedin: data.linkedin !== undefined ? data.linkedin : \"\",\r\n          otherLink: data.others !== undefined ? data.others : \"\"\r\n        })\r\n\r\n        setShowLoad(false);\r\n\r\n        /* Se a inscrição foi efetuada, o botão deverá conter a mensagem \"Efetuar pagamento\" e o tipo de inscrição\r\n        deverá ser selecionado no formulário do PayPal. */\r\n        if (response.data.success) {\r\n          buttonMessage = \"Efetuar pagamento\";\r\n          setSuccess(true);\r\n          selectPayPalValue(data);\r\n        }\r\n\r\n        showAlertBox(response.data.message, buttonMessage, success);\r\n      }\r\n    } else {\r\n      showAlertBox(\"Confirme que você leu o aviso antes de se cadastrar!\", buttonMessage, success);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <MainContainer>\r\n        <Form id=\"main-form\" onSubmit={handleSubmit}>\r\n          <RegisterContainer>\r\n            <LeftSide>\r\n              <Rocket src={rocket} />\r\n\r\n              <h1>Bem vindo!</h1>\r\n\r\n              <p>\r\n                Agradecemos o interesse pelo evento. Para realizar sua inscrição, preencha os campos do formulário.\r\n              </p>\r\n\r\n              <br/>\r\n\r\n              <p>\r\n                <strong>Atenção!</strong> Campos com <span>*</span> são obrigatórios.\r\n              </p>\r\n\r\n              <br/>\r\n\r\n              <p>\r\n                Após completar seu cadastro, você deverá efetuar o pagamento pelo <strong>PayPal</strong> para confirmar\r\n                sua inscrição.\r\n              </p>\r\n\r\n              <br/>\r\n\r\n              <div className=\"already-registered\">\r\n                Já se cadastrou e não pagou?\r\n\r\n                <button type=\"button\" onClick={() => setAlreadyRegistered(true)}>\r\n                  Clique aqui!\r\n                </button>\r\n              </div>\r\n            </LeftSide>\r\n\r\n            <RightSide>\r\n              <h1>Faça seu cadastro e participe do evento!</h1>\r\n              <h3>É rapidinho, prometo.</h3>\r\n\r\n              <FormInternal>\r\n                <InputContainer>\r\n                  <label className=\"required\">Nome</label>\r\n                  <Name name=\"name\"/>\r\n                </InputContainer>\r\n\r\n                <InputContainer>\r\n                  <label className=\"required\">E-mail</label>\r\n                  <Email name=\"email\"/>\r\n                </InputContainer>\r\n\r\n                <SpacedContainer>\r\n                  <InputContainer>\r\n                    <label className=\"required\">Tamanho de camiseta</label>\r\n                    <SelectSizes name=\"tShirtSize\" options={optionsSizes} />\r\n                  </InputContainer>\r\n\r\n                  <InputContainer>\r\n                    <label className=\"required\">CPF</label>\r\n                    <CPF name=\"cpf\" onChange={e => {setCPF(maskCpf(e.target.value))}} value={cpf}/>\r\n                  </InputContainer>\r\n                </SpacedContainer>\r\n\r\n                <InputContainer>\r\n                  <label>Minicurso 1</label>\r\n                  <InlineSelect name=\"miniCourse1\" options={optionsMiniCourse1} />\r\n                </InputContainer>\r\n\r\n                <InputContainer>\r\n                  <label>Minicurso 2</label>\r\n                  <InlineSelect name=\"miniCourse2\" options={optionsMiniCourse2} />\r\n                </InputContainer>\r\n\r\n                <InputContainer>\r\n                  <label className=\"required\">Tipo de inscrição</label>\r\n                  <InlineSelect name=\"inscriptionType\" options={typeInscriptionsOptions} />                  \r\n                </InputContainer>\r\n\r\n                <Options>\r\n                  <CheckBoxes>\r\n                    <SwitchContainer>\r\n                      <Switch onChange={() => wantInternship = !wantInternship} />\r\n                      <Text>Você tem interesse em estágio/emprego para 2020?</Text>\r\n                    </SwitchContainer>\r\n\r\n                    <SwitchContainer>\r\n                      <Switch onChange={() => wantMarathon = !wantMarathon} />\r\n                      <Text>Gostaria de participar da maratona de programação?</Text>\r\n                    </SwitchContainer>\r\n\r\n                    <SwitchContainer>\r\n                      <Switch onChange={() => wantGameChampionship = !wantGameChampionship}/>\r\n                      <Text>Gostaria de participar do campeonato de jogos?</Text>\r\n                    </SwitchContainer>\r\n                  </CheckBoxes>              \r\n                </Options>\r\n\r\n                <AlertText>\r\n                  <span className=\"title\">Atenção!</span>\r\n                  <p> Alunos de TI, lembrem-se de levar um documento que comprove que você é aluno da área, como por \r\n                    exemlo, seu comprovante de matrícula. ;D \r\n                  </p>\r\n\r\n                  <CheckboxContainer>\r\n                    <Checkbox onChange={() => readAdvice = !readAdvice} />\r\n                    <p>Li o aviso acima e estou de acordo</p>\r\n                  </CheckboxContainer>\r\n                </AlertText>\r\n\r\n                <button type=\"submit\">Cadastrar</button>\r\n              </FormInternal>\r\n            </RightSide>\r\n          </RegisterContainer>\r\n\r\n          {/* Caixa de preenchimento que aparecerá caso o usuário queira vaga de estágio/emprego. */}\r\n          <AlertBox\r\n            open={openDialog}\r\n            onClose={() => setOpenDialog(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n            maxWidth=\"900px\"\r\n            fullScreen={fullScreen}\r\n          >\r\n            <DialogContainer>\r\n              <DialogText>\r\n                <p>Notei que você tem interesse em estágio ou emprego.</p>\r\n                <p>Para chegar lá, conte-me mais sobre você:</p>\r\n              </DialogText>\r\n\r\n              <DialogInputContainer>\r\n                <label>LinkedIn</label>\r\n                <DialogInput name=\"linkedin\" />\r\n              </DialogInputContainer>\r\n\r\n              <DialogInputContainer>\r\n                <label>GitHub</label>\r\n                <DialogInput name=\"github\" />\r\n              </DialogInputContainer>\r\n\r\n              <DialogInputContainer>\r\n                <label>Outros</label>\r\n                <DialogInput name=\"others\" />\r\n              </DialogInputContainer>\r\n\r\n              <CheckboxContainer>\r\n                <Checkbox onChange={() => shareLink = !shareLink} />\r\n\r\n                <AdviceContainer>\r\n                  <p>Você concorda que a SEMAC envie esses links, junto ao seu nome, para empresas de tecnologia?</p>\r\n                </AdviceContainer>\r\n              </CheckboxContainer>\r\n\r\n              <ButtonsContainer>\r\n                <button type=\"button\" onClick={() => setOpenDialog(false)}>Cancelar</button>\r\n                <button type=\"submit\" form=\"main-form\">Confirmar</button>\r\n              </ButtonsContainer>\r\n            </DialogContainer>\r\n          </AlertBox>\r\n        </Form>\r\n\r\n        {/* Mensagem que aparecerá após o envio do formulário. */}\r\n        <AlertBox open={showAlert} onClose={() => setShowAlert(false)}>\r\n          <AlertMessageContainer>\r\n            <h1>{responseMessage}</h1>\r\n            <button id=\"alert-button\" onClick={handleAlertButtonClick}>{responseButton}</button>\r\n          </AlertMessageContainer>\r\n        </AlertBox>\r\n\r\n        {/* Mensagem de carregamento exibida no envio do formulário. */}\r\n        <AlertBox open={showLoad} onClose={() => setShowLoad(false)}>\r\n          <AlertMessageContainer>\r\n            <h1>{responseMessage}</h1>\r\n          </AlertMessageContainer>\r\n        </AlertBox>\r\n\r\n        {/* Dialog contendo o input do CPF para pesquisar o cadastro do usuário. */}\r\n        <AlertBox \r\n          open={alreadyRegistered} \r\n          onClose={() => setAlreadyRegistered(false)}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n          maxWidth=\"900px\"\r\n          fullScreen={fullScreen}\r\n        >\r\n          <DialogContainer>\r\n            <DialogText>\r\n              <p>Precisamos do seu e-mail para consultarmos sua inscrição.</p>\r\n            </DialogText>\r\n\r\n            <Form onSubmit={handleSearch}>\r\n              <DialogInputContainer>\r\n                <label className=\"required\">E-mail</label>\r\n                <DialogInput name=\"email\" />\r\n              </DialogInputContainer>\r\n\r\n              <ButtonsContainer>\r\n                <button type=\"button\" onClick={() => setAlreadyRegistered(false)}>Cancelar</button>\r\n                <button type=\"submit\">Confirmar</button>\r\n              </ButtonsContainer>\r\n            </Form>\r\n          </DialogContainer>\r\n        </AlertBox>\r\n\r\n        {/* Formulário escondido que o PayPal utiliza para redirecionamento. */}\r\n        <PayPalSection>\r\n          <form id=\"paypal-form\" action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"POST\" target=\"_top\">\r\n            <input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\" />\r\n            <input type=\"hidden\" name=\"hosted_button_id\" value=\"4BP4AQDNW68Z6\" />\r\n\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <td><input type=\"hidden\" name=\"on0\" value=\"SEMAC 2019\" /></td>\r\n                </tr>\r\n                \r\n                <tr>\r\n                  <td>\r\n                    <select name=\"os0\">\r\n                      <option id=\"opt-ti-student\" value=\"Alunos de TI\" />\r\n                      <option id=\"opt-professors-servers\" value=\"Professores e Servidores\" />\r\n                      <option id=\"opt-others\" value=\"Demais\" />\r\n                    </select>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n            <input type=\"hidden\" name=\"currency_code\" value=\"BRL\" />\r\n            <input \r\n              type=\"image\" \r\n              src=\"https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_buynowCC_LG.gif\" \r\n              border=\"0\" \r\n              name=\"submit\" \r\n              alt=\"PayPal - A maneira fácil e segura de enviar pagamentos online!\"\r\n            />\r\n            <img alt=\"\" \r\n              border=\"0\" \r\n              src=\"https://www.paypalobjects.com/pt_BR/i/scr/pixel.gif\" \r\n              width=\"1\" \r\n              height=\"1\" \r\n            />\r\n          </form>\r\n        </PayPalSection>\r\n      </MainContainer>\r\n    </Fragment>\r\n  );\r\n  \r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","/**\r\n * @author Douglas Brandão\r\n * \r\n * Componente de entrada da aplicação web.\r\n */\r\nimport React, {Fragment} from \"react\";\r\n\r\nimport GlobalStyle from './styles/globals'\r\n\r\nimport Inscriptions from './pages/Inscriptions'\r\n\r\nexport default function App() {\r\n  return (\r\n    <Fragment>\r\n      <GlobalStyle></GlobalStyle>\r\n      <Inscriptions></Inscriptions>\r\n    </Fragment>\r\n  )\r\n}\r\n"],"sourceRoot":""}